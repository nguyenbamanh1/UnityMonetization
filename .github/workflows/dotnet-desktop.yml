
name: .NET Core Desktop

on:
  workflow_dispatch:
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: write
jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: UnityMonetization.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    # - name: Setup MSBuild.exe
    #   uses: microsoft/setup-msbuild@v2

    # # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet publish -r win-x64 -c ${{ env.Configuration }} --self-contained -o Winx64/${{ env.Configuration }}
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.configuration }}
        path: Winx64/${{ env.Configuration }}
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Create .zip of DLLs
      env:
          Configuration: ${{ matrix.configuration }}
      run: | 
        cd Winx64
        powershell Compress-Archive ${{ env.Configuration }} ${{ env.Configuration }}.zip
    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
